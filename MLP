import json
import numpy as np
import tensorflow.keras as keras
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA


# path to json file that stores MFCCs and genre labels for each processed segment
DATA_PATH = r"Jsonfiles\all_mfcc_rasta_feature_set.json"


def load_data(data_path):


    with open(data_path, "r") as fp:
        data = json.load(fp)

    # convert lists to numpy arrays
    X = np.array(data["mfcc"])
    y = np.array(data["labels"])

    number_of_elements = []
    a = 0
    for i in range(len(data["labels"])):
        if i == 0:
            a += 0

    return X, y, data


def plot_history(history):


    fig, axs = plt.subplots(2)


    axs[0].plot(history.history["accuracy"], label="train accuracy")
    axs[0].plot(history.history["val_accuracy"], label="test accuracy")
    axs[0].set_ylabel("Accuracy")
    axs[0].legend(loc="lower right")
    axs[0].set_title("Accuracy eval")


    axs[1].plot(history.history["loss"], label="train error")
    axs[1].plot(history.history["val_loss"], label="test error")
    axs[1].set_ylabel("Error")
    axs[1].set_xlabel("Epoch")
    axs[1].legend(loc="upper right")
    axs[1].set_title("Error eval")

    plt.show()

def processing_data(X, y, data):

   
    X = X.values

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    pca = PCA(n_components=85).fit(X_scaled)

    X_pca = pca.transform(X_scaled)

    return X_pca



if __name__ == "__main__":


    X, y, data = load_data(DATA_PATH)

    X_pca = processing_data(X, y, data)


    X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2)


    model = keras.Sequential([


        keras.layers.InputLayer(input_shape=(X_train.shape[1])),


        keras.layers.Dense(256, activation='relu', kernel_regularizer=keras.regularizers.l2(0.001)),
        keras.layers.Dropout(0.4),


        keras.layers.Dense(1024, activation='relu', kernel_regularizer=keras.regularizers.l2(0.001)),
        keras.layers.Dropout(0.2),


        keras.layers.Dense(1024, activation='relu', kernel_regularizer=keras.regularizers.l2(0.001)),
        keras.layers.Dropout(0.5),



        keras.layers.Dense(512, activation='relu', kernel_regularizer=keras.regularizers.l2(0.001)),
        keras.layers.Dropout(0.2),

        keras.layers.Dense(256, activation='relu', kernel_regularizer=keras.regularizers.l2(0.001)),
        keras.layers.Dropout(0.2),

        keras.layers.Dense(8, activation='softmax')
    ])

    # compile model
    optimiser = keras.optimizers.Adam(learning_rate=0.0001)
    model.compile(optimizer=optimiser,
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

    model.summary()

    # train model
    history = model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=32, epochs=2000)

    # plot accuracy and error as a function of the epochs
    plot_history(history)
